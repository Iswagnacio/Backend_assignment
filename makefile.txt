# URL Shortener Service Makefile

.PHONY: help install test lint format run docker-build docker-run clean setup-dev deploy-local

# Default target
help:
	@echo "Available commands:"
	@echo "  help         - Show this help message"
	@echo "  install      - Install Python dependencies"
	@echo "  setup-dev    - Set up development environment"
	@echo "  test         - Run tests"
	@echo "  test-cov     - Run tests with coverage"
	@echo "  lint         - Run linting checks"
	@echo "  format       - Format code with black and isort"
	@echo "  run          - Run the application locally"
	@echo "  docker-build - Build Docker image"
	@echo "  docker-run   - Run Docker container"
	@echo "  deploy-local - Deploy using docker-compose"
	@echo "  clean        - Clean up temporary files"

# Python environment setup
install:
	pip install -r requirements.txt

setup-dev: install
	pip install black isort flake8 pytest-cov pre-commit
	pre-commit install

# Testing
test:
	pytest -v

test-cov:
	pytest --cov=main --cov-report=html --cov-report=term-missing -v

# Code quality
lint:
	flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
	flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
	black --check .
	isort --check-only .

format:
	black .
	isort .

# Local development
run:
	uvicorn main:app --host 0.0.0.0 --port 8000 --reload

run-prod:
	uvicorn main:app --host 0.0.0.0 --port 8000

# Docker commands
docker-build:
	docker build -t url-shortener:latest .

docker-run: docker-build
	docker run -p 8000:8000 --name url-shortener-container url-shortener:latest

docker-stop:
	docker stop url-shortener-container || true
	docker rm url-shortener-container || true

# Docker Compose
deploy-local:
	docker-compose up --build -d

stop-local:
	docker-compose down

logs-local:
	docker-compose logs -f

# Database migrations (if using Alembic)
migrate-init:
	alembic init alembic

migrate-create:
	alembic revision --autogenerate -m "$(MESSAGE)"

migrate-up:
	alembic upgrade head

migrate-down:
	alembic downgrade -1

# Terraform commands
tf-init:
	cd terraform && terraform init

tf-plan:
	cd terraform && terraform plan -var="project_id=$(GCP_PROJECT_ID)" -var="database_password=$(DB_PASSWORD)"

tf-apply:
	cd terraform && terraform apply -var="project_id=$(GCP_PROJECT_ID)" -var="database_password=$(DB_PASSWORD)"

tf-destroy:
	cd terraform && terraform destroy -var="project_id=$(GCP_PROJECT_ID)" -var="database_password=$(DB_PASSWORD)"

# Clean up
clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type f -name ".coverage" -delete
	find . -type d -name "htmlcov" -exec rm -rf {} +
	find . -type f -name "*.log" -delete

# Security scanning
security-scan:
	pip install safety bandit
	safety check
	bandit -r . -x ./test_*.py

# Performance testing
perf-test:
	pip install locust
	locust -f performance_test.py --host=http://localhost:8000

# Health check
health-check:
	curl -f http://localhost:8000/health || exit 1

# Full CI pipeline locally
ci: format lint test-cov security-scan

# Development workflow
dev: setup-dev format lint test run

# Production deployment check
pre-deploy: ci docker-build
	@echo "All checks passed! Ready for deployment."

# Environment variables template
env-template:
	@echo "# Copy this to .env and fill in your values"
	@echo "DATABASE_URL=postgresql://user:password@localhost:5432/urlshortener"
	@echo "BASE_URL=http://localhost:8000"
	@echo "GCP_PROJECT_ID=your-project-id"
	@echo "DB_PASSWORD=your-secure-password"

# API documentation
docs:
	@echo "API Documentation available at:"
	@echo "  Interactive: http://localhost:8000/docs"
	@echo "  ReDoc: http://localhost:8000/redoc"

# WebSocket test
ws-test:
	python websocket_client.py test123 --create "https://example.com"